import{a as de}from"./chunk-DX2KS5OT.js";import{a as he}from"./chunk-2XHOXA44.js";import"./chunk-FB7L5IGW.js";import"./chunk-QL37M2GK.js";import"./chunk-RQBE5H4E.js";import"./chunk-X3TEJXCB.js";import"./chunk-SIS52AS7.js";import"./chunk-SJOCS2JA.js";import{a as ie}from"./chunk-YHDRG5ST.js";import{a as pe}from"./chunk-XVPC7W3M.js";import{c as ce,d as T}from"./chunk-HBVEXIQP.js";import{l as X}from"./chunk-E7LIQX2C.js";import"./chunk-KMQRAFUQ.js";import{L as Q,P as Z,Q as ee,R as te,S as ae,T as le,U as se,V as re,q as K,y as G}from"./chunk-THZ5HTBN.js";import{b as d,d as R,j as M,l as F,m as ne,n as oe,o as B}from"./chunk-B5LBP65L.js";import"./chunk-2GZW2XWB.js";import"./chunk-APJUBL5S.js";import"./chunk-BYZEYO7O.js";import"./chunk-MOFZY53X.js";import"./chunk-2FSENJOC.js";import{a as O}from"./chunk-6PMQQMX7.js";var N,me=(N=class{constructor(){this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.setAccTitle=ee,this.getAccTitle=te,this.setDiagramTitle=se,this.getDiagramTitle=re,this.getAccDescription=le,this.setAccDescription=ae}getNodes(){return this.nodes}getConfig(){let a=K,o=G();return X(O(O({},a.treemap),o.treemap??{}))}addNode(a,o){this.nodes.push(a),this.levels.set(a,o),o===0&&(this.outerNodes.push(a),this.root??=a)}getRoot(){return{name:"",children:this.outerNodes}}addClass(a,o){let n=this.classes.get(a)??{id:a,styles:[],textStyles:[]},c=o.replace(/\\,/g,"\xA7\xA7\xA7").replace(/,/g,";").replace(/§§§/g,",").split(";");c&&c.forEach(s=>{ce(s)&&(n?.textStyles?n.textStyles.push(s):n.textStyles=[s]),n?.styles?n.styles.push(s):n.styles=[s]}),this.classes.set(a,n)}getClasses(){return this.classes}getStylesForClass(a){return this.classes.get(a)?.styles??[]}clear(){Z(),this.nodes=[],this.levels=new Map,this.outerNodes=[],this.classes=new Map,this.root=void 0}},d(N,"TreeMapDB"),N);function ue(p){if(!p.length)return[];let a=[],o=[];return p.forEach(n=>{let c={name:n.name,children:n.type==="Leaf"?void 0:[]};for(c.classSelector=n?.classSelector,n?.cssCompiledStyles&&(c.cssCompiledStyles=[n.cssCompiledStyles]),n.type==="Leaf"&&n.value!==void 0&&(c.value=n.value);o.length>0&&o[o.length-1].level>=n.level;)o.pop();if(o.length===0)a.push(c);else{let s=o[o.length-1].node;s.children?s.children.push(c):s.children=[c]}n.type!=="Leaf"&&o.push({node:c,level:n.level})}),a}d(ue,"buildHierarchy");var we=d((p,a)=>{de(p,a);let o=[];for(let s of p.TreemapRows??[])s.$type==="ClassDefStatement"&&a.addClass(s.className??"",s.styleText??"");for(let s of p.TreemapRows??[]){let h=s.item;if(!h)continue;let u=s.indent?parseInt(s.indent):0,W=Te(h),l=h.classSelector?a.getStylesForClass(h.classSelector):[],A=l.length>0?l.join(";"):void 0,v={level:u,name:W,type:h.$type,value:h.value,classSelector:h.classSelector,cssCompiledStyles:A};o.push(v)}let n=ue(o),c=d((s,h)=>{for(let u of s)a.addNode(u,h),u.children&&u.children.length>0&&c(u.children,h+1)},"addNodesRecursively");c(n,0)},"populate"),Te=d(p=>p.name?String(p.name):"","getItemName"),fe={parser:{yy:void 0},parse:d(async p=>{try{let o=await he("treemap",p);R.debug("Treemap AST:",o);let n=fe.parser?.yy;if(!(n instanceof me))throw new Error("parser.parser?.yy was not a TreemapDB. This is due to a bug within Mermaid, please report this issue at https://github.com/mermaid-js/mermaid/issues.");we(o,n)}catch(a){throw R.error("Error parsing treemap:",a),a}},"parse")},Le=10,z=10,V=25,$e=d((p,a,o,n)=>{let c=n.db,s=c.getConfig(),h=s.padding??Le,u=c.getDiagramTitle(),W=c.getRoot(),{themeVariables:l}=G();if(!W)return;let A=u?30:0,v=ie(a),Y=s.nodeWidth?s.nodeWidth*z:960,j=s.nodeHeight?s.nodeHeight*z:500,I=Y,U=j+A;v.attr("viewBox",`0 0 ${I} ${U}`),Q(v,U,I,s.useMaxWidth);let C;try{let e=s.valueFormat||",";if(e==="$0,0")C=d(t=>"$"+F(",")(t),"valueFormat");else if(e.startsWith("$")&&e.includes(",")){let t=/\.\d+/.exec(e),r=t?t[0]:"";C=d(m=>"$"+F(","+r)(m),"valueFormat")}else if(e.startsWith("$")){let t=e.substring(1);C=d(r=>"$"+F(t||"")(r),"valueFormat")}else C=F(e)}catch(e){R.error("Error creating format function:",e),C=F(",")}let k=B().range(["transparent",l.cScale0,l.cScale1,l.cScale2,l.cScale3,l.cScale4,l.cScale5,l.cScale6,l.cScale7,l.cScale8,l.cScale9,l.cScale10,l.cScale11]),ye=B().range(["transparent",l.cScalePeer0,l.cScalePeer1,l.cScalePeer2,l.cScalePeer3,l.cScalePeer4,l.cScalePeer5,l.cScalePeer6,l.cScalePeer7,l.cScalePeer8,l.cScalePeer9,l.cScalePeer10,l.cScalePeer11]),E=B().range([l.cScaleLabel0,l.cScaleLabel1,l.cScaleLabel2,l.cScaleLabel3,l.cScaleLabel4,l.cScaleLabel5,l.cScaleLabel6,l.cScaleLabel7,l.cScaleLabel8,l.cScaleLabel9,l.cScaleLabel10,l.cScaleLabel11]);u&&v.append("text").attr("x",I/2).attr("y",A/2).attr("class","treemapTitle").attr("text-anchor","middle").attr("dominant-baseline","middle").text(u);let q=v.append("g").attr("transform",`translate(0, ${A})`).attr("class","treemapContainer"),ge=ne(W).sum(e=>e.value??0).sort((e,t)=>(t.value??0)-(e.value??0)),J=oe().size([Y,j]).paddingTop(e=>e.children&&e.children.length>0?V+z:0).paddingInner(h).paddingLeft(e=>e.children&&e.children.length>0?z:0).paddingRight(e=>e.children&&e.children.length>0?z:0).paddingBottom(e=>e.children&&e.children.length>0?z:0).round(!0)(ge),Se=J.descendants().filter(e=>e.children&&e.children.length>0),P=q.selectAll(".treemapSection").data(Se).enter().append("g").attr("class","treemapSection").attr("transform",e=>`translate(${e.x0},${e.y0})`);P.append("rect").attr("width",e=>e.x1-e.x0).attr("height",V).attr("class","treemapSectionHeader").attr("fill","none").attr("fill-opacity",.6).attr("stroke-width",.6).attr("style",e=>e.depth===0?"display: none;":""),P.append("clipPath").attr("id",(e,t)=>`clip-section-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-12)).attr("height",V),P.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class",(e,t)=>`treemapSection section${t}`).attr("fill",e=>k(e.data.name)).attr("fill-opacity",.6).attr("stroke",e=>ye(e.data.name)).attr("stroke-width",2).attr("stroke-opacity",.4).attr("style",e=>{if(e.depth===0)return"display: none;";let t=T({cssCompiledStyles:e.data.cssCompiledStyles});return t.nodeStyles+";"+t.borderStyles.join(";")}),P.append("text").attr("class","treemapSectionLabel").attr("x",6).attr("y",V/2).attr("dominant-baseline","middle").text(e=>e.depth===0?"":e.data.name).attr("font-weight","bold").attr("style",e=>{if(e.depth===0)return"display: none;";let t="dominant-baseline: middle; font-size: 12px; fill:"+E(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",r=T({cssCompiledStyles:e.data.cssCompiledStyles});return t+r.labelStyles.replace("color:","fill:")}).each(function(e){if(e.depth===0)return;let t=M(this),r=e.data.name;t.text(r);let m=e.x1-e.x0,g=6,S;s.showValues!==!1&&e.value?S=m-10-30-10-g:S=m-g-6;let f=Math.max(15,S),i=t.node();if(i.getComputedTextLength()>f){let y=r;for(;y.length>0;){if(y=r.substring(0,y.length-1),y.length===0){t.text("..."),i.getComputedTextLength()>f&&t.text("");break}if(t.text(y+"..."),i.getComputedTextLength()<=f)break}}}),s.showValues!==!1&&P.append("text").attr("class","treemapSectionValue").attr("x",e=>e.x1-e.x0-10).attr("y",V/2).attr("text-anchor","end").attr("dominant-baseline","middle").text(e=>e.value?C(e.value):"").attr("font-style","italic").attr("style",e=>{if(e.depth===0)return"display: none;";let t="text-anchor: end; dominant-baseline: middle; font-size: 10px; fill:"+E(e.data.name)+"; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;",r=T({cssCompiledStyles:e.data.cssCompiledStyles});return t+r.labelStyles.replace("color:","fill:")});let xe=J.leaves(),_=q.selectAll(".treemapLeafGroup").data(xe).enter().append("g").attr("class",(e,t)=>`treemapNode treemapLeafGroup leaf${t}${e.data.classSelector?` ${e.data.classSelector}`:""}x`).attr("transform",e=>`translate(${e.x0},${e.y0})`);_.append("rect").attr("width",e=>e.x1-e.x0).attr("height",e=>e.y1-e.y0).attr("class","treemapLeaf").attr("fill",e=>e.parent?k(e.parent.data.name):k(e.data.name)).attr("style",e=>T({cssCompiledStyles:e.data.cssCompiledStyles}).nodeStyles).attr("fill-opacity",.3).attr("stroke",e=>e.parent?k(e.parent.data.name):k(e.data.name)).attr("stroke-width",3),_.append("clipPath").attr("id",(e,t)=>`clip-${a}-${t}`).append("rect").attr("width",e=>Math.max(0,e.x1-e.x0-4)).attr("height",e=>Math.max(0,e.y1-e.y0-4)),_.append("text").attr("class","treemapLabel").attr("x",e=>(e.x1-e.x0)/2).attr("y",e=>(e.y1-e.y0)/2).attr("style",e=>{let t="text-anchor: middle; dominant-baseline: middle; font-size: 38px;fill:"+E(e.data.name)+";",r=T({cssCompiledStyles:e.data.cssCompiledStyles});return t+r.labelStyles.replace("color:","fill:")}).attr("clip-path",(e,t)=>`url(#clip-${a}-${t})`).text(e=>e.data.name).each(function(e){let t=M(this),r=e.x1-e.x0,m=e.y1-e.y0,g=t.node(),S=4,L=r-2*S,f=m-2*S;if(L<10||f<10){t.style("display","none");return}let i=parseInt(t.style("font-size"),10),w=8,x=28,y=.6,b=6,D=2;for(;g.getComputedTextLength()>L&&i>w;)i--,t.style("font-size",`${i}px`);let $=Math.max(b,Math.min(x,Math.round(i*y))),H=i+D+$;for(;H>f&&i>w&&(i--,$=Math.max(b,Math.min(x,Math.round(i*y))),!($<b&&i===w));)t.style("font-size",`${i}px`),H=i+D+$,$<=b&&H>f;t.style("font-size",`${i}px`),(g.getComputedTextLength()>L||i<w||f<i)&&t.style("display","none")}),s.showValues!==!1&&_.append("text").attr("class","treemapValue").attr("x",t=>(t.x1-t.x0)/2).attr("y",function(t){return(t.y1-t.y0)/2}).attr("style",t=>{let r="text-anchor: middle; dominant-baseline: hanging; font-size: 28px;fill:"+E(t.data.name)+";",m=T({cssCompiledStyles:t.data.cssCompiledStyles});return r+m.labelStyles.replace("color:","fill:")}).attr("clip-path",(t,r)=>`url(#clip-${a}-${r})`).text(t=>t.value?C(t.value):"").each(function(t){let r=M(this),m=this.parentNode;if(!m){r.style("display","none");return}let g=M(m).select(".treemapLabel");if(g.empty()||g.style("display")==="none"){r.style("display","none");return}let S=parseFloat(g.style("font-size")),L=28,f=.6,i=6,w=2,x=Math.max(i,Math.min(L,Math.round(S*f)));r.style("font-size",`${x}px`);let b=(t.y1-t.y0)/2+S/2+w;r.attr("y",b);let D=t.x1-t.x0,ve=t.y1-t.y0-4,Ce=D-8;r.node().getComputedTextLength()>Ce||b+x>ve||x<i?r.style("display","none"):r.style("display",null)});let be=s.diagramPadding??8;pe(v,be,"flowchart",s?.useMaxWidth||!1)},"draw"),Fe=d(function(p,a){return a.db.getClasses()},"getClasses"),ze={draw:$e,getClasses:Fe},Ne={sectionStrokeColor:"black",sectionStrokeWidth:"1",sectionFillColor:"#efefef",leafStrokeColor:"black",leafStrokeWidth:"1",leafFillColor:"#efefef",labelColor:"black",labelFontSize:"12px",valueFontSize:"10px",valueColor:"black",titleColor:"black",titleFontSize:"14px"},Ae=d(({treemap:p}={})=>{let a=X(Ne,p);return`
  .treemapNode.section {
    stroke: ${a.sectionStrokeColor};
    stroke-width: ${a.sectionStrokeWidth};
    fill: ${a.sectionFillColor};
  }
  .treemapNode.leaf {
    stroke: ${a.leafStrokeColor};
    stroke-width: ${a.leafStrokeWidth};
    fill: ${a.leafFillColor};
  }
  .treemapLabel {
    fill: ${a.labelColor};
    font-size: ${a.labelFontSize};
  }
  .treemapValue {
    fill: ${a.valueColor};
    font-size: ${a.valueFontSize};
  }
  .treemapTitle {
    fill: ${a.titleColor};
    font-size: ${a.titleFontSize};
  }
  `},"getStyles"),ke=Ae,Oe={parser:fe,get db(){return new me},renderer:ze,styles:ke};export{Oe as diagram};
